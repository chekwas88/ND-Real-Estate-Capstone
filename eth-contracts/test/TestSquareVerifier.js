// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    
// Test verification with incorrect proof
var SquareVerifier = artifacts.require('Verifier');
let proofJson = {
    "proof": {
        "a": [
          "0x2cd48df38ce223360240752652b8021422d844cd16a34f2e4da780e59fe5a662",
          "0x173e9141f0ff32b1838193409067b69d321a251483795815a78a40ccabbdd844"
        ],
        "b": [
          [
            "0x1e4ecf4c0ecc9fadd86835e116badbf4c2953019de3943e81482842cafd8fccb",
            "0x2ceb19c103dd2a1a639468ed9e42259f589d563f98239f20af9bffa34da3a082"
          ],
          [
            "0x030410b4d3509ae26ff30480163a06f4b3581d62f8d874bb0c1c6bdc121420ef",
            "0x0af1efcbcd6eb1abc3ef047e5706feb40f7cf4cc36b7694a612ef43d29264606"
          ]
        ],
        "c": [
          "0x27de7f9c3c3ba5d34702cdc2611661396b8a8a0797ff7dde94e6fc0be2f542d0",
          "0x08d0bc622044f0dc16a1225a7b2922ef164bd8522289d933b03a6323f0cc5a42"
        ]
      },
      "inputs": [
        "0x0000000000000000000000000000000000000000000000000000000000000004",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
      ]
}


contract('SquareVerifier', accounts => {
  describe('Test SquareVerifier', function () {

      const account_one = accounts[0];

      beforeEach(async function () { 
          this.contract = await SquareVerifier.new({from: account_one});
      })
      it('should verify with correct proof', async function () {
          let verified = await this.contract.verifyTx.call(
            proofJson.proof.a, proofJson.proof.b, proofJson.proof.c,
            proofJson.inputs
          )
          assert.equal(verified, true, 'should not fail with a correct proof')
      })
      it('should reject with incorrect proof', async function () {
          let verified = await this.contract.verifyTx.call(
            proofJson.proof.a, proofJson.proof.b, proofJson.proof.a,
            proofJson.inputs
          )
          assert.equal(verified, false, 'should fail with incorrect proof')
      })
  })
})
